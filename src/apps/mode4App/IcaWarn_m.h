//
// Generated file, do not edit! Created by nedtool 5.7 from veins/pqcdsa/IcaWarn.msg.
//

#ifndef __ICAWARN_M_H
#define __ICAWARN_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef VEINS_API
#  if defined(VEINS_EXPORT)
#    define VEINS_API  OPP_DLLEXPORT
#  elif defined(VEINS_IMPORT)
#    define VEINS_API  OPP_DLLIMPORT
#  else
#    define VEINS_API
#  endif
#endif



class IcaWarn;
/**
 * Class generated from <tt>veins/pqcdsa/IcaWarn.msg:2</tt> by nedtool.
 * <pre>
 * packet IcaWarn extends cPacket
 * {
 *     int32 msgCnt = 0;        // use as monotonically increasing sequence number
 *     string tempId;            // hex string for TemporaryID (4 bytes -> 8 hex chars)
 *     int32 intersectionId = 0;
 *     int32 approach = -1; // exclusive with lane; -1 if not used
 *     int32 lane = -1; // exclusive with approach; -1 if not used
 *     int32 eventFlag = 0;  // VehicleEventFlags bit mask
 * 
 *     // RSU transmitter position (OMNeT++ world coords)
 *     double srcX = 0;
 *     double srcY = 0;
 * 
 *     // Optional/minimal Part I (kept as-is)
 *     int64 lat = 0;
 *     int64 lon = 0;
 * 
 *     // Timing (when RSU generated/bridged it)
 *     simtime_t genTime;
 * }
 * </pre>
 */
class VEINS_API IcaWarn : public ::omnetpp::cPacket
{
  protected:
    int32_t msgCnt = 0;
    omnetpp::opp_string tempId;
    int32_t intersectionId = 0;
    int32_t approach = -1;
    int32_t lane = -1;
    int32_t eventFlag = 0;
    double srcX = 0;
    double srcY = 0;
    int64_t lat = 0;
    int64_t lon = 0;
    omnetpp::simtime_t genTime = SIMTIME_ZERO;

  private:
    void copy(const IcaWarn& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const IcaWarn&);

  public:
    IcaWarn(const char *name=nullptr, short kind=0);
    IcaWarn(const IcaWarn& other);
    virtual ~IcaWarn();
    IcaWarn& operator=(const IcaWarn& other);
    virtual IcaWarn *dup() const override {return new IcaWarn(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int32_t getMsgCnt() const;
    virtual void setMsgCnt(int32_t msgCnt);
    virtual const char * getTempId() const;
    virtual void setTempId(const char * tempId);
    virtual int32_t getIntersectionId() const;
    virtual void setIntersectionId(int32_t intersectionId);
    virtual int32_t getApproach() const;
    virtual void setApproach(int32_t approach);
    virtual int32_t getLane() const;
    virtual void setLane(int32_t lane);
    virtual int32_t getEventFlag() const;
    virtual void setEventFlag(int32_t eventFlag);
    virtual double getSrcX() const;
    virtual void setSrcX(double srcX);
    virtual double getSrcY() const;
    virtual void setSrcY(double srcY);
    virtual int64_t getLat() const;
    virtual void setLat(int64_t lat);
    virtual int64_t getLon() const;
    virtual void setLon(int64_t lon);
    virtual omnetpp::simtime_t getGenTime() const;
    virtual void setGenTime(omnetpp::simtime_t genTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IcaWarn& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IcaWarn& obj) {obj.parsimUnpack(b);}

#endif // ifndef __ICAWARN_M_H

