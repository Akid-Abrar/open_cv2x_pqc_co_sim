//
// Generated file, do not edit! Created by nedtool 5.7 from apps/mode4App/Certificate.msg.
//

#ifndef __CERTIFICATE_M_H
#define __CERTIFICATE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>apps/mode4App/Certificate.msg:2</tt> by nedtool.
 * <pre>
 * message Certificate
 * {
 *     string subjectId;
 *     string algoName;
 *     uint8_t publicKey[]; // Use a dynamic array for raw binary data
 *     int64_t notBefore = 0;
 *     int64_t notAfter = 0;
 * }
 * </pre>
 */
class Certificate : public ::omnetpp::cMessage
{
  protected:
    ::omnetpp::opp_string subjectId;
    ::omnetpp::opp_string algoName;
    uint8_t *publicKey; // array ptr
    unsigned int publicKey_arraysize;
    int64_t notBefore;
    int64_t notAfter;

  private:
    void copy(const Certificate& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Certificate&);

  public:
    Certificate(const char *name=nullptr, short kind=0);
    Certificate(const Certificate& other);
    virtual ~Certificate();
    Certificate& operator=(const Certificate& other);
    virtual Certificate *dup() const override {return new Certificate(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getSubjectId() const;
    virtual void setSubjectId(const char * subjectId);
    virtual const char * getAlgoName() const;
    virtual void setAlgoName(const char * algoName);
    virtual void setPublicKeyArraySize(unsigned int size);
    virtual unsigned int getPublicKeyArraySize() const;
    virtual uint8_t getPublicKey(unsigned int k) const;
    virtual void setPublicKey(unsigned int k, uint8_t publicKey);
    virtual int64_t getNotBefore() const;
    virtual void setNotBefore(int64_t notBefore);
    virtual int64_t getNotAfter() const;
    virtual void setNotAfter(int64_t notAfter);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Certificate& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Certificate& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CERTIFICATE_M_H

